#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update>
#define ll long long
using namespace std;
const ll sz = 1e6 + 5;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);

    string s;
    s
    ll n = s.size();
    // cout << n << " string " << endl;
    stack<char> st;
    ll ans = 0;
    for (int i = 0; i < n; i++)
    {
        char ch = s[i];

        if (st.empty())
        {
            st.push(ch);
        }
        else if (st.top() == '<' && ch == '>')
        {
            st.pop();
        }
        else
        {
            st.push(ch);
        }

        ans = max(ans, (ll)st.size());
    }

    cout << ans / 2 << endl;

    return 0;
}